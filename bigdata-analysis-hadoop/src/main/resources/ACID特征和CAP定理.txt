Mysql的ACID和分布式的CAP定理

ACID是什么？
原子性(Atomicity)
    原子性是指一个事务是一个不可分割的工作单位，其中的操作要么都做，要么都不做。
隔离性(Isolation)
    隔离性是指多个事务并发执行的时候，事务内部的操作与其他事务是隔离的，并发执行的各个事务之间不能互相干扰。
持久性(Durability)
    持久性是指事务一旦提交，它对数据库的改变就应该是永久性的。接下来的其他操作或故障不应该对其有任何影响。
一致性(Consistency)
        一致性是指事务执行前后，数据处于一种合法的状态，这种状态是语义上的而不是语法上的。 这个状态是满足预定的约束就叫做合法的状态，再通俗一点，这状态是由你自己来定义的。
    满足这个状态，数据就是一致的，不满足这个状态，数据就是不一致的！

Mysql怎么保证一致性的？
       从数据库层面，数据库通过原子性、隔离性、持久性来保证一致性。也就是说ACID四大特性之中，C(一致性)是目的，A(原子性)、I(隔离性)、D(持久性)是手段，
    是为了保证一致性，数据库提供的手段。数据库必须要实现AID三大特性，才有可能实现一致性。
    从应用层面，通过代码判断数据库数据是否有效，然后决定回滚还是提交数据。

Mysql怎么保证原子性的？
    利用Innodb的undo log名为回滚日志，是实现原子性的关键，当事务回滚时能够撤销所有已经成功执行的sql语句，它需要记录你要回滚的相应日志信息。例如
    (1)当你delete一条数据的时候，就需要记录这条数据的信息，回滚的时候，insert这条旧数据
    (2)当你update一条数据的时候，就需要记录之前的旧值，回滚的时候，根据旧值执行update操作
    (3)当年insert一条数据的时候，就需要这条记录的主键，回滚的时候，根据主键执行delete操作
    undo log记录了这些回滚需要的信息，当事务执行失败或调用了rollback，导致事务需要回滚，便可以利用undo log中的信息将数据回滚到修改之前的样子。

Mysql怎么保证持久性的？
    利用Innodb的redo log（重做日志）。
    Mysql是先把磁盘上的数据加载到内存中，在内存中对数据进行修改，再刷回磁盘上。如果此时突然宕机，内存中的数据就会丢失。
    怎么解决这个问题？ 简单啊，事务提交前直接把数据写入磁盘就行啊。
    这么做有什么问题？只修改一个页面里的一个字节，就要将整个页面刷入磁盘，太浪费资源了。毕竟一个页面16kb大小，你只改其中一点点东西，就要将16kb的内容刷入磁盘，听着也不合理。
    毕竟一个事务里的SQL可能牵涉到多个数据页的修改，而这些数据页可能不是相邻的，也就是属于随机IO。显然操作随机IO，速度会比较慢。
    采用redo log解决上面的问题。当做数据修改的时候，不仅在内存中操作，还会在redo log中记录这次操作。当事务提交的时候，会将redo log日志进行刷盘(redo log一部分在内存中，一部分在磁盘上)。
    当数据库宕机重启的时候，会将redo log中的内容恢复到数据库中，再根据undo log和binlog内容决定回滚数据还是提交数据。
    采用redo log的好处？
    redo log进行刷盘比对数据页刷盘效率高，具体表现如下：
    1.redo log体积小，毕竟只记录了哪一页修改了啥，因此体积小，刷盘快。
    2.redo log是一直往末尾进行追加，属于顺序IO。效率显然比随机IO来的快。

Mysql怎么保证隔离性的？
    　　利用的是锁和MVCC机制。MVCC,即多版本并发控制(Multi Version Concurrency Control),一个行记录数据有多个版本对快照数据，这些快照数据在undo log中。
    如果一个事务读取的行正在做DELELE或者UPDATE操作，读取操作不会等行上的锁释放，而是读取该行的快照版本。
    在事务隔离级别为读已提交(Read Commited)时，一个事务能够读到另一个事务已经提交的数据，是不满足隔离性的。但是当事务隔离级别为可重复读(Repeateable Read)中，是满足隔离性的。

CAP定理是什么？
    CAP原则又称CAP定理，指的是在一个分布式系统中， Consistency（一致性）、 Availability（可用性）、Partition tolerance（分区容错性），三者不可得兼。
    一致性（C）：在分布式系统中的所有数据备份，在同一时刻是否同样的值。（等同于所有节点访问同一份最新的数据副本）
    可用性（A）：在集群中一部分节点故障后，集群整体是否还能响应客户端的读写请求。（对数据更新具备高可用性）
    分区容忍性（P）：以实际效果而言，分区相当于对通信的时限要求。系统如果不能在时限内达成数据一致性，就意味着发生了分区的情况，必须就当前操作在C和A之间做出选择。
        CAP原则的精髓就是要么AP，要么CP，要么AC，但是不存在CAP。如果在某个分布式系统中数据无副本， 那么系统必然满足强一致性条件， 因为只有独一数据，不会出现数据不一致的情况，此时C和P两要素具备，
    但是如果系统发生了网络分区状况或者宕机，必然导致某些数据不可以访问，此时可用性条件就不能被满足，即在此情况下获得了CP系统，但是CAP不可同时满足。
        因此在进行分布式架构设计时，必须做出取舍。当前一般是通过分布式缓存中各节点的最终一致性来提高系统的性能，通过使用多节点之间的数据异步复制技术来实现集群化的数据一致性。
    通常使用类似memcached之类的NOSQL作为实现手段。虽然memcached也可以是分布式集群环境的，但是对于一份数据来说，它总是存储在某一台memcached服务器上。
    如果发生网络故障或是服务器死机，则存储在这台服务器上的所有数据都将不可访问。由于数据是存储在内存中的，重启服务器，将导致数据全部丢失。当然也可以自己实现一套机制，
    用来在分布式memcached之间进行数据的同步和持久化，但是实现难度是非常大的。
        CAP理论就是说在分布式存储系统中，最多只能实现上面的两点。而由于网络硬件肯定会出现延迟丢包等问题，所以分区容错性是我们必须需要实现的。所以我们只能在一致性和可用性之间进行权衡。
